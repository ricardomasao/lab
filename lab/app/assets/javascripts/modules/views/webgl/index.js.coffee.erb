Particle = require "views/webgl/particle"

module.exports = class WebglIndex

  dom:null
  scene:null
  camera:null
  renderer:null
  geometry:null
  array_particles:[]
  array_elevations:[]
  attributes:null
  texture:null
  texture_a:null
  texture_b:null
  shader:null
  stats:null

  constructor:()->

    @dom = $ 'main'
    @setup_shaders()
    #@setup_stats()

    @scene = new THREE.Scene()
    @scene.fog = new THREE.Fog( 0xFF0000, 0, 3 );
    @camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
    @renderer = new THREE.WebGLRenderer()
    @renderer.setSize window.innerWidth, window.innerHeight

    @dom.append @renderer.domElement

    @geometry = new THREE.PlaneGeometry(10, 4, 170, 70)
    mesh = new THREE.Mesh(@geometry, new THREE.MeshBasicMaterial({color: 0x00ff00, opacity: 0 }))

    @texture = THREE.ImageUtils.loadTexture( "<%= asset_path('lensflare0.jpg') %>" )
    @texture_a = THREE.ImageUtils.loadTexture( "<%= asset_path('lensflare3.jpg') %>" )
    @texture_b = THREE.ImageUtils.loadTexture( "<%= asset_path('lensflare2.jpg') %>" )

    @geometry2 = new THREE.Geometry()
    @geometry2.vertices = @geometry.vertices

    @attributes =
      alpha:{type: "f", value: []}
      size:{type: "f", value: []}
      index:{type: "f", value: []}

    uniforms =
      textures: { type: "tv", value: [@texture,@texture_a,@texture_b] }
      fogColor:    { type: "c", value: @scene.fog.color },
      fogNear:     { type: "f", value: @scene.fog.near },
      fogFar:      { type: "f", value: @scene.fog.far }


    @shader_material = new THREE.ShaderMaterial(
      uniforms: uniforms
      attributes: @attributes
      blending: THREE.AdditiveBlending
      vertexShader: @shader.vertexShader
      fragmentShader: @shader.fragmentShader
      transparent: true
      fog:true
    )
    @shader_material.fog

    particles = new THREE.PointCloud(@geometry2, @shader_material)
    particles.sortParticles = true;

    for i of @geometry2.vertices
      particle = new Particle @geometry2.vertices[i], Math.random()*0.1, @attributes, i
      @attributes.index.value[i] = Math.random() * 3 | 0
      particle.velocity = 100 + Math.random()*500
      particle.set_size 0 #Math.random()*6
      particle.set_alpha Math.random()*.5
      particle.set_color new THREE.Color(0xffffff)
      @array_particles.push particle

    @scene.add particles

    particles.rotation.x = -1.7

    @camera.position.z = -.5;
    @camera.position.y = 1;

    @setup_elevation(55)
    @generate_terrain()

    @render()
    @show()

  show:()->
    for i of @array_particles
      @array_particles[i].show(Math.random()*4, 1+Math.random()*8)# if parseInt(i) is 0

    TweenMax.to @camera.position, 5, { z:2.5, ease:Expo.easeInOut }


  setup_elevation:(num_points)=>
    i = 0
    while i < num_points
      elevation_height = Math.random()*500
      @array_elevations.push {elevation_point:parseInt(Math.random()*@geometry.vertices.length), elevation_height:elevation_height, radius:Math.random()*1.5 }
      i++

  generate_terrain:()=>
    for i of @array_elevations
      points = @get_nearest_points( @array_particles[@array_elevations[i].elevation_point], @array_elevations[i].radius )
      @rise_terrain points, @array_particles[@array_elevations[i].elevation_point], @array_elevations[i].radius

  get_nearest_points:(point, radius)->
    nearest_points = []

    for i of @array_particles
      pointX = @array_particles[i].get_x()
      pointY = @array_particles[i].get_y()
      centerX = point.get_x()
      centerY = point.get_y()
      nearest_points.push(@array_particles[i]) if @point_inside_radius(pointX,pointY,centerX, centerY, radius)

    return nearest_points


  point_inside_radius:(pointX, pointY, centerX, centerY, radius)->
    return Math.pow(pointX - centerX, 2) + Math.pow(pointY - centerY, 2) < radius*radius

  rise_terrain:(points,center, radius)=>
    for i of points
      distance = @get_distance_between_points(points[i], center)
      points[i].set_z Math.abs( distance - radius )/4
      points[i].random_x Math.random()*0.03 - Math.random()*0.03
      points[i].random_y Math.random()*0.03 - Math.random()*0.03

  get_distance_between_points:(p1,p2)->
    p1_x = p1.get_x()
    p1_y = p1.get_y()
    p2_x = p2.get_x()
    p2_y = p2.get_y()

    return Math.sqrt( (p2_x-=p1_x)*p2_x + (p2_y-=p1_y)*p2_y );

  setup_shaders:()->
    @shader =
      vertexShader: [
        "attribute float alpha;"
        "attribute float size;"
        "attribute vec3 color;"
        "attribute float index;"

        "varying float vAlpha;"
        "varying float vSize;"
        "varying vec3 vColor;",
        "varying float vIndex;"

        THREE.ShaderChunk[ "fog_fragment" ],

        "void main() {"

            "vAlpha = alpha;"
            "vSize = size;"
            "vColor = color;"
            "vIndex = index;"

            "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );"

            "gl_PointSize = vSize;"
            "gl_Position = projectionMatrix * mvPosition;"

        "}"
      ].join("\n")

      fragmentShader: [
        "uniform sampler2D textures[3];"

        "varying vec3 vColor;",
        "varying float vIndex;",

        THREE.ShaderChunk[ "fog_pars_fragment" ],

        "void main() {"
            "vec4 t;"

            "if (vIndex == 0.0) {"
                "t = texture2D(textures[0], gl_PointCoord);"
            "} else if (vIndex == 1.0) {"
                "t = texture2D(textures[1], gl_PointCoord);"
            "} else if (vIndex == 2.0) {"
                "t = texture2D(textures[2], gl_PointCoord);"
            "}"

            "gl_FragColor = t;"

        "}"
      ].join("\n")

  setup_stats:()->
    @stats = new Stats();
    @stats.domElement.style.position = 'absolute';
    @stats.domElement.style.top = '0px';
    $('body').append( @stats.domElement );

  render:()=>

    i = 0
    while i < @array_particles.length
      particle = @array_particles[i]
      particle.counter += particle.interval
      particle.move_z( particle.initial_z + (Math.sin( particle.counter )/particle.velocity) ) if particle.initial_z != 0
      i++

    @geometry2.verticesNeedUpdate = true

    #@stats.update()

    requestAnimationFrame @render
    @renderer.render @scene, @camera
    return
